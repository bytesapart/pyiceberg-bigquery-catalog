# .github/workflows/release.yml
name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: release
      cancel-in-progress: false

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'

    - name: Install semantic-release and plugins
      run: |
        npm install -g semantic-release@latest
        npm install -g @semantic-release/commit-analyzer@latest
        npm install -g @semantic-release/release-notes-generator@latest
        npm install -g @semantic-release/changelog@latest
        npm install -g @semantic-release/git@latest
        npm install -g @semantic-release/github@latest
        npm install -g conventional-changelog-conventionalcommits@latest

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --no-interaction

    - name: Build package
      run: |
        poetry build

    - name: Run semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: semantic-release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
        retention-days: 7

    # Uncomment the following sections to publish to TestPyPI and PyPI

    # - name: Publish to TestPyPI
    #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    #   env:
    #     POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TEST_PYPI_TOKEN }}
    #   run: |
    #     poetry config repositories.testpypi https://test.pypi.org/legacy/
    #     poetry config pypi-token.testpypi $POETRY_PYPI_TOKEN_TESTPYPI
    #     poetry publish -r testpypi --skip-existing

    # - name: Publish to PyPI
    #   if: startsWith(github.ref, 'refs/tags/')
    #   env:
    #     POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
    #   run: |
    #     poetry config pypi-token.pypi $POETRY_PYPI_TOKEN_PYPI
    #     poetry publish --skip-existing
